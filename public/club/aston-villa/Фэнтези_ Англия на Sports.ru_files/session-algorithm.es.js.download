const LS_SESSION_UID = "[SPRTS]:sessionUid";
const LS_SESSION_START = "[SPRTS]:sessionStart";
const SECOND = 1e3;
const MINUTE = 60 * SECOND;
const SESSION_TIMEOUT = 30 * MINUTE;
const LS_SESSION_START_TIME_DIFF = 10 * SECOND;
const getSessionUid = () => {
  var _a;
  return (_a = window == null ? void 0 : window.localStorage) == null ? void 0 : _a.getItem(LS_SESSION_UID);
};
let nanoid = (size = 21) => {
  let id = "";
  let bytes = crypto.getRandomValues(new Uint8Array(size));
  while (size--) {
    let byte = bytes[size] & 63;
    if (byte < 36) {
      id += byte.toString(36);
    } else if (byte < 62) {
      id += (byte - 26).toString(36).toUpperCase();
    } else if (byte < 63) {
      id += "_";
    } else {
      id += "-";
    }
  }
  return id;
};
const getSessionStart = () => {
  var _a;
  return (_a = window == null ? void 0 : window.localStorage) == null ? void 0 : _a.getItem(LS_SESSION_START);
};
const updateSession = () => {
  const ls = window.localStorage;
  if (!ls)
    return;
  const sessionUid = getSessionUid();
  const sessionStart = getSessionStart();
  const isSessionTimedOut = sessionStart && Date.now() - parseInt(sessionStart, 10) > SESSION_TIMEOUT;
  if (isSessionTimedOut || !sessionUid) {
    ls.setItem(LS_SESSION_UID, nanoid());
  }
  ls.setItem(LS_SESSION_START, JSON.stringify(Date.now()));
};
const initSessionAlgorithm = () => {
  const ls = window.localStorage;
  if (!ls)
    return;
  updateSession();
  const hasTimeDiff = (newValue, oldValue) => {
    return newValue - oldValue >= LS_SESSION_START_TIME_DIFF;
  };
  window.addEventListener("storage", (event) => {
    if (!event.newValue)
      return;
    switch (event.key) {
      case LS_SESSION_START:
        if (!event.oldValue || hasTimeDiff(+event.newValue, +event.oldValue)) {
          ls.setItem(LS_SESSION_START, event.newValue);
        }
        break;
      case LS_SESSION_UID:
        ls.setItem(LS_SESSION_UID, event.newValue);
        break;
    }
  });
  const updateSessionAfterReopen = () => {
    if (document.visibilityState === "visible") {
      updateSession();
    }
  };
  document.addEventListener("visibilitychange", updateSessionAfterReopen);
  window.addEventListener("unload", () => {
    document.removeEventListener("visibilitychange", updateSessionAfterReopen);
  });
};
const setInitSessionAlgorithm = () => {
  window.SPRTS = window.SPRTS || {};
  window.SPRTS.getSessionUid = getSessionUid;
  window.SPRTS.updateSession = updateSession;
  initSessionAlgorithm();
};
setInitSessionAlgorithm();
